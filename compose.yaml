services:
  db:
    image: postgres:latest
    container_name: db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: /var/lib/postgresql/data/
    volumes:
      - ${PGDATA}:/var/lib/postgresql/data/
    ports:
      - 5432:5432
    healthcheck:
      test: pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}
      interval: 10s
      timeout: 5s
      retries: 5
  
  backend:
    container_name: backend
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env
    build: ./backend/
    ports:
      - 5000:5000
    volumes:
      - ${STORAGE_BASEPATH}:/opt/app/${STORAGE_BASEPATH}
    develop:
      watch:
        - action: sync
          path: ./backend/
          target: /opt/app/backend/
        - action: rebuild
          path: ./backend/requirements.txt

  frontend:
    container_name: frontend
    depends_on:
      - backend
    env_file:
      - .env
    build: ./frontend/
    ports:
      - 3000:3000
    develop:
      watch:
        - action: sync
          path: ./frontend/
          target: /opt/app/frontend/
        - action: rebuild
          path: ./frontend/package.json

