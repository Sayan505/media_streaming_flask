services:
  db:
    image: postgres:latest
    container_name: db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ${PGDATA}:/var/lib/postgresql/data/
    expose:
      - 5432:5432
    healthcheck:
      test: pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: apache/kafka:latest
    container_name: kafka
    hostname: kafka
    expose:
      - 9092:9092
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT_HOST://kafka:9092,PLAINTEXT://kafka:19092"
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka:29093"
      KAFKA_LISTENERS: "CONTROLLER://:29093,PLAINTEXT_HOST://:9092,PLAINTEXT://:19092"
      KAFKA_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_LOG_RETENTION_BYTES: -1
      KAFKA_LOG_RETENTION_MS: -1
      KAFKA_LOG_FLUSH_INTERVAL_MESSAGES: 1
      KAFKA_LOG_FLUSH_INTERVAL_MS: 500
    healthcheck:
      test: /opt/kafka/bin/kafka-broker-api-versions.sh --bootstrap-server kafka:9092
      interval: 10s
      timeout: 3s
      retries: 10

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.14.3
    container_name: elasticsearch
    hostname: elasticsearch
    mem_limit: 1g
    environment:
      - node.name=elasticsearch
      - discovery.type=single-node
      - xpack.security.enabled=false
      - xpack.security.transport.ssl.enabled=false
      - xpack,security.http.ssl.enabled= false
      - ELASTIC_PASSWORD=${ELASTICSEARCH_PASSWORD}
    expose:
      - 9200:9200
    healthcheck:
      test: curl --silent --fail localhost:9200/_cluster/health
      interval: 10s
      timeout: 3s
      retries: 10

  backend:
    container_name: backend
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    env_file:
      - .env
    build: ./backend/
    ports:
      - 5000:5000
    volumes:
      - ${UPLOAD_FOLDER}:/opt/app/backend/${UPLOAD_FOLDER}
    develop:
      watch:
        - action: sync
          path: ./backend/
          target: /opt/app/backend/
        - action: rebuild
          path: ./backend/requirements.txt

  frontend:
    container_name: frontend
    depends_on:
      - backend
    env_file:
      - .env
    build: ./frontend/
    ports:
      - 3000:3000
    develop:
      watch:
        - action: sync
          path: ./frontend/
          target: /opt/app/frontend/
        - action: rebuild
          path: ./frontend/package.json

